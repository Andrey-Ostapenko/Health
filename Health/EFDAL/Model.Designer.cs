//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "AppointmentsMTODoctors", "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Doctors), "Appointments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Appointments), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "AppointmentsMTOPatients", "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Patients), "Appointments", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Appointments), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "CandidatesMTORoles", "Roles", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Roles), "Candidates", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Candidates), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "DefaultScheduleMTOParameters", "Parameters", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(EFDAL.Parameters), "DefaultSchedule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.DefaultSchedule), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "DiagnosisMTODiagnosisClass", "DiagnosisClass", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.DiagnosisClass), "Diagnosis", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Diagnosis), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "DiagnosisClassMTO", "DiagnosisClass", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.DiagnosisClass), "DiagnosisClass1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.DiagnosisClass), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "DoctorsMTOSpecialties", "Specialties", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Specialties), "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Doctors), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "DoctorsOTOUsers", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Users), "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(EFDAL.Doctors), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "WorkWeeksMTODoctors", "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Doctors), "WorkWeeks", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.WorkWeeks), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PatientsMTOFunctionalClasses", "FunctionalClasses", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(EFDAL.FunctionalClasses), "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Patients), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "FunctionalDisordersMTO", "FunctionalDisorders", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.FunctionalDisorders), "FunctionalDisorders1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.FunctionalDisorders), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PersonalScheduleMTOParameters", "Parameters", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(EFDAL.Parameters), "PersonalSchedule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.PersonalSchedule), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PatientsOTOUsers", "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Users), "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(EFDAL.Patients), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PatientsToSurgerysMTMPatients", "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Patients), "PatientsToSurgerys", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.PatientsToSurgerys), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PersonalScheduleMTOPatients", "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(EFDAL.Patients), "PersonalSchedule", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.PersonalSchedule), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PatientsToSurgerysMTMSurgerys", "Surgerys", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Surgerys), "PatientsToSurgerys", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.PatientsToSurgerys), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "UsersMTORoles", "Roles", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(EFDAL.Roles), "Users", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Users), true)]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "FunctionalDisordersToPatients", "FunctionalDisorders", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.FunctionalDisorders), "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Patients))]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PatientsToDiagnosis", "Diagnosis", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Diagnosis), "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Patients))]
[assembly: EdmRelationshipAttribute("Health.MsSqlDatabaseModel", "PatientsToDoctors", "Doctors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Doctors), "Patients", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(EFDAL.Patients))]

#endregion

namespace EFDAL
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class Entities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект Entities, используя строку соединения из раздела "Entities" файла конфигурации приложения.
        /// </summary>
        public Entities() : base("name=Entities", "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта Entities.
        /// </summary>
        public Entities(string connectionString) : base(connectionString, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта Entities.
        /// </summary>
        public Entities(EntityConnection connection) : base(connection, "Entities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Appointments> Appointments
        {
            get
            {
                if ((_Appointments == null))
                {
                    _Appointments = base.CreateObjectSet<Appointments>("Appointments");
                }
                return _Appointments;
            }
        }
        private ObjectSet<Appointments> _Appointments;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Candidates> Candidates
        {
            get
            {
                if ((_Candidates == null))
                {
                    _Candidates = base.CreateObjectSet<Candidates>("Candidates");
                }
                return _Candidates;
            }
        }
        private ObjectSet<Candidates> _Candidates;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<DefaultSchedule> DefaultSchedule
        {
            get
            {
                if ((_DefaultSchedule == null))
                {
                    _DefaultSchedule = base.CreateObjectSet<DefaultSchedule>("DefaultSchedule");
                }
                return _DefaultSchedule;
            }
        }
        private ObjectSet<DefaultSchedule> _DefaultSchedule;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Diagnosis> Diagnosis
        {
            get
            {
                if ((_Diagnosis == null))
                {
                    _Diagnosis = base.CreateObjectSet<Diagnosis>("Diagnosis");
                }
                return _Diagnosis;
            }
        }
        private ObjectSet<Diagnosis> _Diagnosis;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<DiagnosisClass> DiagnosisClass
        {
            get
            {
                if ((_DiagnosisClass == null))
                {
                    _DiagnosisClass = base.CreateObjectSet<DiagnosisClass>("DiagnosisClass");
                }
                return _DiagnosisClass;
            }
        }
        private ObjectSet<DiagnosisClass> _DiagnosisClass;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Doctors> Doctors
        {
            get
            {
                if ((_Doctors == null))
                {
                    _Doctors = base.CreateObjectSet<Doctors>("Doctors");
                }
                return _Doctors;
            }
        }
        private ObjectSet<Doctors> _Doctors;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<FunctionalClasses> FunctionalClasses
        {
            get
            {
                if ((_FunctionalClasses == null))
                {
                    _FunctionalClasses = base.CreateObjectSet<FunctionalClasses>("FunctionalClasses");
                }
                return _FunctionalClasses;
            }
        }
        private ObjectSet<FunctionalClasses> _FunctionalClasses;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<FunctionalDisorders> FunctionalDisorders
        {
            get
            {
                if ((_FunctionalDisorders == null))
                {
                    _FunctionalDisorders = base.CreateObjectSet<FunctionalDisorders>("FunctionalDisorders");
                }
                return _FunctionalDisorders;
            }
        }
        private ObjectSet<FunctionalDisorders> _FunctionalDisorders;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Parameters> Parameters
        {
            get
            {
                if ((_Parameters == null))
                {
                    _Parameters = base.CreateObjectSet<Parameters>("Parameters");
                }
                return _Parameters;
            }
        }
        private ObjectSet<Parameters> _Parameters;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Patients> Patients
        {
            get
            {
                if ((_Patients == null))
                {
                    _Patients = base.CreateObjectSet<Patients>("Patients");
                }
                return _Patients;
            }
        }
        private ObjectSet<Patients> _Patients;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PatientsToSurgerys> PatientsToSurgerys
        {
            get
            {
                if ((_PatientsToSurgerys == null))
                {
                    _PatientsToSurgerys = base.CreateObjectSet<PatientsToSurgerys>("PatientsToSurgerys");
                }
                return _PatientsToSurgerys;
            }
        }
        private ObjectSet<PatientsToSurgerys> _PatientsToSurgerys;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<PersonalSchedule> PersonalSchedule
        {
            get
            {
                if ((_PersonalSchedule == null))
                {
                    _PersonalSchedule = base.CreateObjectSet<PersonalSchedule>("PersonalSchedule");
                }
                return _PersonalSchedule;
            }
        }
        private ObjectSet<PersonalSchedule> _PersonalSchedule;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Roles> Roles
        {
            get
            {
                if ((_Roles == null))
                {
                    _Roles = base.CreateObjectSet<Roles>("Roles");
                }
                return _Roles;
            }
        }
        private ObjectSet<Roles> _Roles;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Specialties> Specialties
        {
            get
            {
                if ((_Specialties == null))
                {
                    _Specialties = base.CreateObjectSet<Specialties>("Specialties");
                }
                return _Specialties;
            }
        }
        private ObjectSet<Specialties> _Specialties;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Surgerys> Surgerys
        {
            get
            {
                if ((_Surgerys == null))
                {
                    _Surgerys = base.CreateObjectSet<Surgerys>("Surgerys");
                }
                return _Surgerys;
            }
        }
        private ObjectSet<Surgerys> _Surgerys;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Users> Users
        {
            get
            {
                if ((_Users == null))
                {
                    _Users = base.CreateObjectSet<Users>("Users");
                }
                return _Users;
            }
        }
        private ObjectSet<Users> _Users;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<WorkWeeks> WorkWeeks
        {
            get
            {
                if ((_WorkWeeks == null))
                {
                    _WorkWeeks = base.CreateObjectSet<WorkWeeks>("WorkWeeks");
                }
                return _WorkWeeks;
            }
        }
        private ObjectSet<WorkWeeks> _WorkWeeks;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Appointments. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToAppointments(Appointments appointments)
        {
            base.AddObject("Appointments", appointments);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Candidates. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCandidates(Candidates candidates)
        {
            base.AddObject("Candidates", candidates);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet DefaultSchedule. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDefaultSchedule(DefaultSchedule defaultSchedule)
        {
            base.AddObject("DefaultSchedule", defaultSchedule);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Diagnosis. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDiagnosis(Diagnosis diagnosis)
        {
            base.AddObject("Diagnosis", diagnosis);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet DiagnosisClass. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDiagnosisClass(DiagnosisClass diagnosisClass)
        {
            base.AddObject("DiagnosisClass", diagnosisClass);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Doctors. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDoctors(Doctors doctors)
        {
            base.AddObject("Doctors", doctors);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet FunctionalClasses. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToFunctionalClasses(FunctionalClasses functionalClasses)
        {
            base.AddObject("FunctionalClasses", functionalClasses);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet FunctionalDisorders. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToFunctionalDisorders(FunctionalDisorders functionalDisorders)
        {
            base.AddObject("FunctionalDisorders", functionalDisorders);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Parameters. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToParameters(Parameters parameters)
        {
            base.AddObject("Parameters", parameters);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Patients. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPatients(Patients patients)
        {
            base.AddObject("Patients", patients);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PatientsToSurgerys. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPatientsToSurgerys(PatientsToSurgerys patientsToSurgerys)
        {
            base.AddObject("PatientsToSurgerys", patientsToSurgerys);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet PersonalSchedule. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPersonalSchedule(PersonalSchedule personalSchedule)
        {
            base.AddObject("PersonalSchedule", personalSchedule);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Roles. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToRoles(Roles roles)
        {
            base.AddObject("Roles", roles);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Specialties. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSpecialties(Specialties specialties)
        {
            base.AddObject("Specialties", specialties);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Surgerys. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSurgerys(Surgerys surgerys)
        {
            base.AddObject("Surgerys", surgerys);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Users. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToUsers(Users users)
        {
            base.AddObject("Users", users);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet WorkWeeks. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToWorkWeeks(WorkWeeks workWeeks)
        {
            base.AddObject("WorkWeeks", workWeeks);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Appointments")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Appointments : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Appointments.
        /// </summary>
        /// <param name="appointmentId">Исходное значение свойства AppointmentId.</param>
        /// <param name="patientId">Исходное значение свойства PatientId.</param>
        /// <param name="doctorId">Исходное значение свойства DoctorId.</param>
        /// <param name="date">Исходное значение свойства Date.</param>
        public static Appointments CreateAppointments(global::System.Int32 appointmentId, global::System.Int32 patientId, global::System.Int32 doctorId, global::System.DateTime date)
        {
            Appointments appointments = new Appointments();
            appointments.AppointmentId = appointmentId;
            appointments.PatientId = patientId;
            appointments.DoctorId = doctorId;
            appointments.Date = date;
            return appointments;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AppointmentId
        {
            get
            {
                return _AppointmentId;
            }
            set
            {
                if (_AppointmentId != value)
                {
                    OnAppointmentIdChanging(value);
                    ReportPropertyChanging("AppointmentId");
                    _AppointmentId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AppointmentId");
                    OnAppointmentIdChanged();
                }
            }
        }
        private global::System.Int32 _AppointmentId;
        partial void OnAppointmentIdChanging(global::System.Int32 value);
        partial void OnAppointmentIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                OnPatientIdChanging(value);
                ReportPropertyChanging("PatientId");
                _PatientId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PatientId");
                OnPatientIdChanged();
            }
        }
        private global::System.Int32 _PatientId;
        partial void OnPatientIdChanging(global::System.Int32 value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                OnDoctorIdChanging(value);
                ReportPropertyChanging("DoctorId");
                _DoctorId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DoctorId");
                OnDoctorIdChanged();
            }
        }
        private global::System.Int32 _DoctorId;
        partial void OnDoctorIdChanging(global::System.Int32 value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private global::System.DateTime _Date;
        partial void OnDateChanging(global::System.DateTime value);
        partial void OnDateChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "AppointmentsMTODoctors", "Doctors")]
        public Doctors Doctors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.AppointmentsMTODoctors", "Doctors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.AppointmentsMTODoctors", "Doctors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctors> DoctorsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.AppointmentsMTODoctors", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctors>("Health.MsSqlDatabaseModel.AppointmentsMTODoctors", "Doctors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "AppointmentsMTOPatients", "Patients")]
        public Patients Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.AppointmentsMTOPatients", "Patients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.AppointmentsMTOPatients", "Patients").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patients> PatientsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.AppointmentsMTOPatients", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patients>("Health.MsSqlDatabaseModel.AppointmentsMTOPatients", "Patients", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Candidates")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Candidates : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Candidates.
        /// </summary>
        /// <param name="candidateId">Исходное значение свойства CandidateId.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="thirdName">Исходное значение свойства ThirdName.</param>
        /// <param name="login">Исходное значение свойства Login.</param>
        /// <param name="password">Исходное значение свойства Password.</param>
        /// <param name="roleId">Исходное значение свойства RoleId.</param>
        /// <param name="birthday">Исходное значение свойства Birthday.</param>
        /// <param name="token">Исходное значение свойства Token.</param>
        /// <param name="policy">Исходное значение свойства Policy.</param>
        /// <param name="card">Исходное значение свойства Card.</param>
        /// <param name="mother">Исходное значение свойства Mother.</param>
        /// <param name="startDateOfObservation">Исходное значение свойства StartDateOfObservation.</param>
        public static Candidates CreateCandidates(global::System.Int32 candidateId, global::System.String firstName, global::System.String lastName, global::System.String thirdName, global::System.String login, global::System.String password, global::System.Int32 roleId, global::System.DateTime birthday, global::System.String token, global::System.String policy, global::System.String card, global::System.String mother, global::System.DateTime startDateOfObservation)
        {
            Candidates candidates = new Candidates();
            candidates.CandidateId = candidateId;
            candidates.FirstName = firstName;
            candidates.LastName = lastName;
            candidates.ThirdName = thirdName;
            candidates.Login = login;
            candidates.Password = password;
            candidates.RoleId = roleId;
            candidates.Birthday = birthday;
            candidates.Token = token;
            candidates.Policy = policy;
            candidates.Card = card;
            candidates.Mother = mother;
            candidates.StartDateOfObservation = startDateOfObservation;
            return candidates;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CandidateId
        {
            get
            {
                return _CandidateId;
            }
            set
            {
                if (_CandidateId != value)
                {
                    OnCandidateIdChanging(value);
                    ReportPropertyChanging("CandidateId");
                    _CandidateId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CandidateId");
                    OnCandidateIdChanged();
                }
            }
        }
        private global::System.Int32 _CandidateId;
        partial void OnCandidateIdChanging(global::System.Int32 value);
        partial void OnCandidateIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ThirdName
        {
            get
            {
                return _ThirdName;
            }
            set
            {
                OnThirdNameChanging(value);
                ReportPropertyChanging("ThirdName");
                _ThirdName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ThirdName");
                OnThirdNameChanged();
            }
        }
        private global::System.String _ThirdName;
        partial void OnThirdNameChanging(global::System.String value);
        partial void OnThirdNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                OnRoleIdChanging(value);
                ReportPropertyChanging("RoleId");
                _RoleId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleId");
                OnRoleIdChanged();
            }
        }
        private global::System.Int32 _RoleId;
        partial void OnRoleIdChanging(global::System.Int32 value);
        partial void OnRoleIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Birthday
        {
            get
            {
                return _Birthday;
            }
            set
            {
                OnBirthdayChanging(value);
                ReportPropertyChanging("Birthday");
                _Birthday = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Birthday");
                OnBirthdayChanged();
            }
        }
        private global::System.DateTime _Birthday;
        partial void OnBirthdayChanging(global::System.DateTime value);
        partial void OnBirthdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Token
        {
            get
            {
                return _Token;
            }
            set
            {
                OnTokenChanging(value);
                ReportPropertyChanging("Token");
                _Token = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Token");
                OnTokenChanged();
            }
        }
        private global::System.String _Token;
        partial void OnTokenChanging(global::System.String value);
        partial void OnTokenChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Policy
        {
            get
            {
                return _Policy;
            }
            set
            {
                OnPolicyChanging(value);
                ReportPropertyChanging("Policy");
                _Policy = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Policy");
                OnPolicyChanged();
            }
        }
        private global::System.String _Policy;
        partial void OnPolicyChanging(global::System.String value);
        partial void OnPolicyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Card
        {
            get
            {
                return _Card;
            }
            set
            {
                OnCardChanging(value);
                ReportPropertyChanging("Card");
                _Card = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Card");
                OnCardChanged();
            }
        }
        private global::System.String _Card;
        partial void OnCardChanging(global::System.String value);
        partial void OnCardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Mother
        {
            get
            {
                return _Mother;
            }
            set
            {
                OnMotherChanging(value);
                ReportPropertyChanging("Mother");
                _Mother = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Mother");
                OnMotherChanged();
            }
        }
        private global::System.String _Mother;
        partial void OnMotherChanging(global::System.String value);
        partial void OnMotherChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDateOfObservation
        {
            get
            {
                return _StartDateOfObservation;
            }
            set
            {
                OnStartDateOfObservationChanging(value);
                ReportPropertyChanging("StartDateOfObservation");
                _StartDateOfObservation = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDateOfObservation");
                OnStartDateOfObservationChanged();
            }
        }
        private global::System.DateTime _StartDateOfObservation;
        partial void OnStartDateOfObservationChanging(global::System.DateTime value);
        partial void OnStartDateOfObservationChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Phone1
        {
            get
            {
                return _Phone1;
            }
            set
            {
                OnPhone1Changing(value);
                ReportPropertyChanging("Phone1");
                _Phone1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Phone1");
                OnPhone1Changed();
            }
        }
        private Nullable<global::System.Int32> _Phone1;
        partial void OnPhone1Changing(Nullable<global::System.Int32> value);
        partial void OnPhone1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Phone2
        {
            get
            {
                return _Phone2;
            }
            set
            {
                OnPhone2Changing(value);
                ReportPropertyChanging("Phone2");
                _Phone2 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Phone2");
                OnPhone2Changed();
            }
        }
        private Nullable<global::System.Int32> _Phone2;
        partial void OnPhone2Changing(Nullable<global::System.Int32> value);
        partial void OnPhone2Changed();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "CandidatesMTORoles", "Roles")]
        public Roles Roles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("Health.MsSqlDatabaseModel.CandidatesMTORoles", "Roles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("Health.MsSqlDatabaseModel.CandidatesMTORoles", "Roles").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Roles> RolesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("Health.MsSqlDatabaseModel.CandidatesMTORoles", "Roles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Roles>("Health.MsSqlDatabaseModel.CandidatesMTORoles", "Roles", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="DefaultSchedule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DefaultSchedule : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта DefaultSchedule.
        /// </summary>
        /// <param name="defaultScheduleId">Исходное значение свойства DefaultScheduleId.</param>
        public static DefaultSchedule CreateDefaultSchedule(global::System.Int32 defaultScheduleId)
        {
            DefaultSchedule defaultSchedule = new DefaultSchedule();
            defaultSchedule.DefaultScheduleId = defaultScheduleId;
            return defaultSchedule;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DefaultScheduleId
        {
            get
            {
                return _DefaultScheduleId;
            }
            set
            {
                if (_DefaultScheduleId != value)
                {
                    OnDefaultScheduleIdChanging(value);
                    ReportPropertyChanging("DefaultScheduleId");
                    _DefaultScheduleId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DefaultScheduleId");
                    OnDefaultScheduleIdChanged();
                }
            }
        }
        private global::System.Int32 _DefaultScheduleId;
        partial void OnDefaultScheduleIdChanging(global::System.Int32 value);
        partial void OnDefaultScheduleIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParameterId
        {
            get
            {
                return _ParameterId;
            }
            set
            {
                OnParameterIdChanging(value);
                ReportPropertyChanging("ParameterId");
                _ParameterId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParameterId");
                OnParameterIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ParameterId;
        partial void OnParameterIdChanging(Nullable<global::System.Int32> value);
        partial void OnParameterIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DiagnosesId
        {
            get
            {
                return _DiagnosesId;
            }
            set
            {
                OnDiagnosesIdChanging(value);
                ReportPropertyChanging("DiagnosesId");
                _DiagnosesId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiagnosesId");
                OnDiagnosesIdChanged();
            }
        }
        private Nullable<global::System.Int32> _DiagnosesId;
        partial void OnDiagnosesIdChanging(Nullable<global::System.Int32> value);
        partial void OnDiagnosesIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Years
        {
            get
            {
                return _Years;
            }
            set
            {
                OnYearsChanging(value);
                ReportPropertyChanging("Years");
                _Years = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Years");
                OnYearsChanged();
            }
        }
        private Nullable<global::System.Int32> _Years;
        partial void OnYearsChanging(Nullable<global::System.Int32> value);
        partial void OnYearsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Months
        {
            get
            {
                return _Months;
            }
            set
            {
                OnMonthsChanging(value);
                ReportPropertyChanging("Months");
                _Months = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Months");
                OnMonthsChanged();
            }
        }
        private Nullable<global::System.Int32> _Months;
        partial void OnMonthsChanging(Nullable<global::System.Int32> value);
        partial void OnMonthsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Weeks
        {
            get
            {
                return _Weeks;
            }
            set
            {
                OnWeeksChanging(value);
                ReportPropertyChanging("Weeks");
                _Weeks = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Weeks");
                OnWeeksChanged();
            }
        }
        private Nullable<global::System.Int32> _Weeks;
        partial void OnWeeksChanging(Nullable<global::System.Int32> value);
        partial void OnWeeksChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Days
        {
            get
            {
                return _Days;
            }
            set
            {
                OnDaysChanging(value);
                ReportPropertyChanging("Days");
                _Days = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Days");
                OnDaysChanged();
            }
        }
        private Nullable<global::System.Int32> _Days;
        partial void OnDaysChanging(Nullable<global::System.Int32> value);
        partial void OnDaysChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Hours
        {
            get
            {
                return _Hours;
            }
            set
            {
                OnHoursChanging(value);
                ReportPropertyChanging("Hours");
                _Hours = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Hours");
                OnHoursChanged();
            }
        }
        private Nullable<global::System.Int32> _Hours;
        partial void OnHoursChanging(Nullable<global::System.Int32> value);
        partial void OnHoursChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Minutes
        {
            get
            {
                return _Minutes;
            }
            set
            {
                OnMinutesChanging(value);
                ReportPropertyChanging("Minutes");
                _Minutes = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Minutes");
                OnMinutesChanged();
            }
        }
        private Nullable<global::System.Int32> _Minutes;
        partial void OnMinutesChanging(Nullable<global::System.Int32> value);
        partial void OnMinutesChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.TimeSpan> TimeStart
        {
            get
            {
                return _TimeStart;
            }
            set
            {
                OnTimeStartChanging(value);
                ReportPropertyChanging("TimeStart");
                _TimeStart = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeStart");
                OnTimeStartChanged();
            }
        }
        private Nullable<global::System.TimeSpan> _TimeStart;
        partial void OnTimeStartChanging(Nullable<global::System.TimeSpan> value);
        partial void OnTimeStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.TimeSpan> TimeEnd
        {
            get
            {
                return _TimeEnd;
            }
            set
            {
                OnTimeEndChanging(value);
                ReportPropertyChanging("TimeEnd");
                _TimeEnd = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeEnd");
                OnTimeEndChanged();
            }
        }
        private Nullable<global::System.TimeSpan> _TimeEnd;
        partial void OnTimeEndChanging(Nullable<global::System.TimeSpan> value);
        partial void OnTimeEndChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DayOfWeek
        {
            get
            {
                return _DayOfWeek;
            }
            set
            {
                OnDayOfWeekChanging(value);
                ReportPropertyChanging("DayOfWeek");
                _DayOfWeek = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DayOfWeek");
                OnDayOfWeekChanged();
            }
        }
        private Nullable<global::System.Int32> _DayOfWeek;
        partial void OnDayOfWeekChanging(Nullable<global::System.Int32> value);
        partial void OnDayOfWeekChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DayOfMonth
        {
            get
            {
                return _DayOfMonth;
            }
            set
            {
                OnDayOfMonthChanging(value);
                ReportPropertyChanging("DayOfMonth");
                _DayOfMonth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DayOfMonth");
                OnDayOfMonthChanged();
            }
        }
        private Nullable<global::System.Int32> _DayOfMonth;
        partial void OnDayOfMonthChanging(Nullable<global::System.Int32> value);
        partial void OnDayOfMonthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MonthOfYear
        {
            get
            {
                return _MonthOfYear;
            }
            set
            {
                OnMonthOfYearChanging(value);
                ReportPropertyChanging("MonthOfYear");
                _MonthOfYear = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MonthOfYear");
                OnMonthOfYearChanged();
            }
        }
        private Nullable<global::System.Int32> _MonthOfYear;
        partial void OnMonthOfYearChanging(Nullable<global::System.Int32> value);
        partial void OnMonthOfYearChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WeekOfMonth
        {
            get
            {
                return _WeekOfMonth;
            }
            set
            {
                OnWeekOfMonthChanging(value);
                ReportPropertyChanging("WeekOfMonth");
                _WeekOfMonth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeekOfMonth");
                OnWeekOfMonthChanged();
            }
        }
        private Nullable<global::System.Int32> _WeekOfMonth;
        partial void OnWeekOfMonthChanging(Nullable<global::System.Int32> value);
        partial void OnWeekOfMonthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WeekParity
        {
            get
            {
                return _WeekParity;
            }
            set
            {
                OnWeekParityChanging(value);
                ReportPropertyChanging("WeekParity");
                _WeekParity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeekParity");
                OnWeekParityChanged();
            }
        }
        private Nullable<global::System.Int32> _WeekParity;
        partial void OnWeekParityChanging(Nullable<global::System.Int32> value);
        partial void OnWeekParityChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DefaultScheduleMTOParameters", "Parameters")]
        public Parameters Parameters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameters>("Health.MsSqlDatabaseModel.DefaultScheduleMTOParameters", "Parameters").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameters>("Health.MsSqlDatabaseModel.DefaultScheduleMTOParameters", "Parameters").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Parameters> ParametersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameters>("Health.MsSqlDatabaseModel.DefaultScheduleMTOParameters", "Parameters");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Parameters>("Health.MsSqlDatabaseModel.DefaultScheduleMTOParameters", "Parameters", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Diagnosis")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Diagnosis : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Diagnosis.
        /// </summary>
        /// <param name="diagnosisId">Исходное значение свойства DiagnosisId.</param>
        /// <param name="diagnosisClassId">Исходное значение свойства DiagnosisClassId.</param>
        public static Diagnosis CreateDiagnosis(global::System.Int32 diagnosisId, global::System.Int32 diagnosisClassId)
        {
            Diagnosis diagnosis = new Diagnosis();
            diagnosis.DiagnosisId = diagnosisId;
            diagnosis.DiagnosisClassId = diagnosisClassId;
            return diagnosis;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DiagnosisId
        {
            get
            {
                return _DiagnosisId;
            }
            set
            {
                if (_DiagnosisId != value)
                {
                    OnDiagnosisIdChanging(value);
                    ReportPropertyChanging("DiagnosisId");
                    _DiagnosisId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DiagnosisId");
                    OnDiagnosisIdChanged();
                }
            }
        }
        private global::System.Int32 _DiagnosisId;
        partial void OnDiagnosisIdChanging(global::System.Int32 value);
        partial void OnDiagnosisIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DiagnosisClassId
        {
            get
            {
                return _DiagnosisClassId;
            }
            set
            {
                OnDiagnosisClassIdChanging(value);
                ReportPropertyChanging("DiagnosisClassId");
                _DiagnosisClassId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DiagnosisClassId");
                OnDiagnosisClassIdChanged();
            }
        }
        private global::System.Int32 _DiagnosisClassId;
        partial void OnDiagnosisClassIdChanging(global::System.Int32 value);
        partial void OnDiagnosisClassIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DiagnosisMTODiagnosisClass", "DiagnosisClass")]
        public DiagnosisClass DiagnosisClass
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisMTODiagnosisClass", "DiagnosisClass").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisMTODiagnosisClass", "DiagnosisClass").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DiagnosisClass> DiagnosisClassReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisMTODiagnosisClass", "DiagnosisClass");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisMTODiagnosisClass", "DiagnosisClass", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToDiagnosis", "Patients")]
        public EntityCollection<Patients> Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patients>("Health.MsSqlDatabaseModel.PatientsToDiagnosis", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patients>("Health.MsSqlDatabaseModel.PatientsToDiagnosis", "Patients", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="DiagnosisClass")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DiagnosisClass : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта DiagnosisClass.
        /// </summary>
        /// <param name="diagnosisClassId">Исходное значение свойства DiagnosisClassId.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        /// <param name="parent">Исходное значение свойства Parent.</param>
        public static DiagnosisClass CreateDiagnosisClass(global::System.Int32 diagnosisClassId, global::System.String name, global::System.String code, global::System.Int32 parent)
        {
            DiagnosisClass diagnosisClass = new DiagnosisClass();
            diagnosisClass.DiagnosisClassId = diagnosisClassId;
            diagnosisClass.Name = name;
            diagnosisClass.Code = code;
            diagnosisClass.Parent = parent;
            return diagnosisClass;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DiagnosisClassId
        {
            get
            {
                return _DiagnosisClassId;
            }
            set
            {
                if (_DiagnosisClassId != value)
                {
                    OnDiagnosisClassIdChanging(value);
                    ReportPropertyChanging("DiagnosisClassId");
                    _DiagnosisClassId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DiagnosisClassId");
                    OnDiagnosisClassIdChanged();
                }
            }
        }
        private global::System.Int32 _DiagnosisClassId;
        partial void OnDiagnosisClassIdChanging(global::System.Int32 value);
        partial void OnDiagnosisClassIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Parent
        {
            get
            {
                return _Parent;
            }
            set
            {
                OnParentChanging(value);
                ReportPropertyChanging("Parent");
                _Parent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Parent");
                OnParentChanged();
            }
        }
        private global::System.Int32 _Parent;
        partial void OnParentChanging(global::System.Int32 value);
        partial void OnParentChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DiagnosisMTODiagnosisClass", "Diagnosis")]
        public EntityCollection<Diagnosis> Diagnosis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Diagnosis>("Health.MsSqlDatabaseModel.DiagnosisMTODiagnosisClass", "Diagnosis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Diagnosis>("Health.MsSqlDatabaseModel.DiagnosisMTODiagnosisClass", "Diagnosis", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DiagnosisClassMTO", "DiagnosisClass1")]
        public EntityCollection<DiagnosisClass> DiagnosisClass1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisClassMTO", "DiagnosisClass1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisClassMTO", "DiagnosisClass1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DiagnosisClassMTO", "DiagnosisClass")]
        public DiagnosisClass DiagnosisClass2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisClassMTO", "DiagnosisClass").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisClassMTO", "DiagnosisClass").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DiagnosisClass> DiagnosisClass2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisClassMTO", "DiagnosisClass");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DiagnosisClass>("Health.MsSqlDatabaseModel.DiagnosisClassMTO", "DiagnosisClass", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Doctors")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Doctors : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Doctors.
        /// </summary>
        /// <param name="doctorId">Исходное значение свойства DoctorId.</param>
        /// <param name="specialtyId">Исходное значение свойства SpecialtyId.</param>
        public static Doctors CreateDoctors(global::System.Int32 doctorId, global::System.Int32 specialtyId)
        {
            Doctors doctors = new Doctors();
            doctors.DoctorId = doctorId;
            doctors.SpecialtyId = specialtyId;
            return doctors;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                if (_DoctorId != value)
                {
                    OnDoctorIdChanging(value);
                    ReportPropertyChanging("DoctorId");
                    _DoctorId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DoctorId");
                    OnDoctorIdChanged();
                }
            }
        }
        private global::System.Int32 _DoctorId;
        partial void OnDoctorIdChanging(global::System.Int32 value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpecialtyId
        {
            get
            {
                return _SpecialtyId;
            }
            set
            {
                OnSpecialtyIdChanging(value);
                ReportPropertyChanging("SpecialtyId");
                _SpecialtyId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SpecialtyId");
                OnSpecialtyIdChanged();
            }
        }
        private global::System.Int32 _SpecialtyId;
        partial void OnSpecialtyIdChanging(global::System.Int32 value);
        partial void OnSpecialtyIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "AppointmentsMTODoctors", "Appointments")]
        public EntityCollection<Appointments> Appointments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Appointments>("Health.MsSqlDatabaseModel.AppointmentsMTODoctors", "Appointments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Appointments>("Health.MsSqlDatabaseModel.AppointmentsMTODoctors", "Appointments", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DoctorsMTOSpecialties", "Specialties")]
        public Specialties Specialties
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Specialties>("Health.MsSqlDatabaseModel.DoctorsMTOSpecialties", "Specialties").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Specialties>("Health.MsSqlDatabaseModel.DoctorsMTOSpecialties", "Specialties").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Specialties> SpecialtiesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Specialties>("Health.MsSqlDatabaseModel.DoctorsMTOSpecialties", "Specialties");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Specialties>("Health.MsSqlDatabaseModel.DoctorsMTOSpecialties", "Specialties", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DoctorsOTOUsers", "Users")]
        public Users Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Users").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "WorkWeeksMTODoctors", "WorkWeeks")]
        public EntityCollection<WorkWeeks> WorkWeeks
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<WorkWeeks>("Health.MsSqlDatabaseModel.WorkWeeksMTODoctors", "WorkWeeks");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<WorkWeeks>("Health.MsSqlDatabaseModel.WorkWeeksMTODoctors", "WorkWeeks", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToDoctors", "Patients")]
        public EntityCollection<Patients> Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patients>("Health.MsSqlDatabaseModel.PatientsToDoctors", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patients>("Health.MsSqlDatabaseModel.PatientsToDoctors", "Patients", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="FunctionalClasses")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FunctionalClasses : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта FunctionalClasses.
        /// </summary>
        /// <param name="functionalClassesId">Исходное значение свойства FunctionalClassesId.</param>
        /// <param name="code">Исходное значение свойства Code.</param>
        /// <param name="description">Исходное значение свойства Description.</param>
        public static FunctionalClasses CreateFunctionalClasses(global::System.Int32 functionalClassesId, global::System.String code, global::System.String description)
        {
            FunctionalClasses functionalClasses = new FunctionalClasses();
            functionalClasses.FunctionalClassesId = functionalClassesId;
            functionalClasses.Code = code;
            functionalClasses.Description = description;
            return functionalClasses;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FunctionalClassesId
        {
            get
            {
                return _FunctionalClassesId;
            }
            set
            {
                if (_FunctionalClassesId != value)
                {
                    OnFunctionalClassesIdChanging(value);
                    ReportPropertyChanging("FunctionalClassesId");
                    _FunctionalClassesId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FunctionalClassesId");
                    OnFunctionalClassesIdChanged();
                }
            }
        }
        private global::System.Int32 _FunctionalClassesId;
        partial void OnFunctionalClassesIdChanging(global::System.Int32 value);
        partial void OnFunctionalClassesIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Code
        {
            get
            {
                return _Code;
            }
            set
            {
                OnCodeChanging(value);
                ReportPropertyChanging("Code");
                _Code = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Code");
                OnCodeChanged();
            }
        }
        private global::System.String _Code;
        partial void OnCodeChanging(global::System.String value);
        partial void OnCodeChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsMTOFunctionalClasses", "Patients")]
        public EntityCollection<Patients> Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patients>("Health.MsSqlDatabaseModel.PatientsMTOFunctionalClasses", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patients>("Health.MsSqlDatabaseModel.PatientsMTOFunctionalClasses", "Patients", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="FunctionalDisorders")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class FunctionalDisorders : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта FunctionalDisorders.
        /// </summary>
        /// <param name="functionalDisordersId">Исходное значение свойства FunctionalDisordersId.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="parent">Исходное значение свойства Parent.</param>
        public static FunctionalDisorders CreateFunctionalDisorders(global::System.Int32 functionalDisordersId, global::System.String name, global::System.Int32 parent)
        {
            FunctionalDisorders functionalDisorders = new FunctionalDisorders();
            functionalDisorders.FunctionalDisordersId = functionalDisordersId;
            functionalDisorders.Name = name;
            functionalDisorders.Parent = parent;
            return functionalDisorders;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 FunctionalDisordersId
        {
            get
            {
                return _FunctionalDisordersId;
            }
            set
            {
                if (_FunctionalDisordersId != value)
                {
                    OnFunctionalDisordersIdChanging(value);
                    ReportPropertyChanging("FunctionalDisordersId");
                    _FunctionalDisordersId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("FunctionalDisordersId");
                    OnFunctionalDisordersIdChanged();
                }
            }
        }
        private global::System.Int32 _FunctionalDisordersId;
        partial void OnFunctionalDisordersIdChanging(global::System.Int32 value);
        partial void OnFunctionalDisordersIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Parent
        {
            get
            {
                return _Parent;
            }
            set
            {
                OnParentChanging(value);
                ReportPropertyChanging("Parent");
                _Parent = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Parent");
                OnParentChanged();
            }
        }
        private global::System.Int32 _Parent;
        partial void OnParentChanging(global::System.Int32 value);
        partial void OnParentChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "FunctionalDisordersMTO", "FunctionalDisorders1")]
        public EntityCollection<FunctionalDisorders> FunctionalDisorders1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersMTO", "FunctionalDisorders1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersMTO", "FunctionalDisorders1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "FunctionalDisordersMTO", "FunctionalDisorders")]
        public FunctionalDisorders FunctionalDisorders2
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersMTO", "FunctionalDisorders").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersMTO", "FunctionalDisorders").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FunctionalDisorders> FunctionalDisorders2Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersMTO", "FunctionalDisorders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersMTO", "FunctionalDisorders", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "FunctionalDisordersToPatients", "Patients")]
        public EntityCollection<Patients> Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Patients>("Health.MsSqlDatabaseModel.FunctionalDisordersToPatients", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Patients>("Health.MsSqlDatabaseModel.FunctionalDisordersToPatients", "Patients", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Parameters")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Parameters : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Parameters.
        /// </summary>
        /// <param name="parameterId">Исходное значение свойства ParameterId.</param>
        public static Parameters CreateParameters(global::System.Int32 parameterId)
        {
            Parameters parameters = new Parameters();
            parameters.ParameterId = parameterId;
            return parameters;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ParameterId
        {
            get
            {
                return _ParameterId;
            }
            set
            {
                if (_ParameterId != value)
                {
                    OnParameterIdChanging(value);
                    ReportPropertyChanging("ParameterId");
                    _ParameterId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ParameterId");
                    OnParameterIdChanged();
                }
            }
        }
        private global::System.Int32 _ParameterId;
        partial void OnParameterIdChanging(global::System.Int32 value);
        partial void OnParameterIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] DefaultValue
        {
            get
            {
                return StructuralObject.GetValidValue(_DefaultValue);
            }
            set
            {
                OnDefaultValueChanging(value);
                ReportPropertyChanging("DefaultValue");
                _DefaultValue = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DefaultValue");
                OnDefaultValueChanged();
            }
        }
        private global::System.Byte[] _DefaultValue;
        partial void OnDefaultValueChanging(global::System.Byte[] value);
        partial void OnDefaultValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Value
        {
            get
            {
                return StructuralObject.GetValidValue(_Value);
            }
            set
            {
                OnValueChanging(value);
                ReportPropertyChanging("Value");
                _Value = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Value");
                OnValueChanged();
            }
        }
        private global::System.Byte[] _Value;
        partial void OnValueChanging(global::System.Byte[] value);
        partial void OnValueChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.Byte[] Metadata
        {
            get
            {
                return StructuralObject.GetValidValue(_Metadata);
            }
            set
            {
                OnMetadataChanging(value);
                ReportPropertyChanging("Metadata");
                _Metadata = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Metadata");
                OnMetadataChanged();
            }
        }
        private global::System.Byte[] _Metadata;
        partial void OnMetadataChanging(global::System.Byte[] value);
        partial void OnMetadataChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DefaultScheduleMTOParameters", "DefaultSchedule")]
        public EntityCollection<DefaultSchedule> DefaultSchedule
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DefaultSchedule>("Health.MsSqlDatabaseModel.DefaultScheduleMTOParameters", "DefaultSchedule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DefaultSchedule>("Health.MsSqlDatabaseModel.DefaultScheduleMTOParameters", "DefaultSchedule", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PersonalScheduleMTOParameters", "PersonalSchedule")]
        public EntityCollection<PersonalSchedule> PersonalSchedule
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonalSchedule>("Health.MsSqlDatabaseModel.PersonalScheduleMTOParameters", "PersonalSchedule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonalSchedule>("Health.MsSqlDatabaseModel.PersonalScheduleMTOParameters", "PersonalSchedule", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Patients")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Patients : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Patients.
        /// </summary>
        /// <param name="patientId">Исходное значение свойства PatientId.</param>
        /// <param name="policy">Исходное значение свойства Policy.</param>
        /// <param name="card">Исходное значение свойства Card.</param>
        /// <param name="mother">Исходное значение свойства Mother.</param>
        /// <param name="startDateOfObservation">Исходное значение свойства StartDateOfObservation.</param>
        public static Patients CreatePatients(global::System.Int32 patientId, global::System.String policy, global::System.String card, global::System.String mother, global::System.DateTime startDateOfObservation)
        {
            Patients patients = new Patients();
            patients.PatientId = patientId;
            patients.Policy = policy;
            patients.Card = card;
            patients.Mother = mother;
            patients.StartDateOfObservation = startDateOfObservation;
            return patients;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                if (_PatientId != value)
                {
                    OnPatientIdChanging(value);
                    ReportPropertyChanging("PatientId");
                    _PatientId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PatientId");
                    OnPatientIdChanged();
                }
            }
        }
        private global::System.Int32 _PatientId;
        partial void OnPatientIdChanging(global::System.Int32 value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Policy
        {
            get
            {
                return _Policy;
            }
            set
            {
                OnPolicyChanging(value);
                ReportPropertyChanging("Policy");
                _Policy = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Policy");
                OnPolicyChanged();
            }
        }
        private global::System.String _Policy;
        partial void OnPolicyChanging(global::System.String value);
        partial void OnPolicyChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Card
        {
            get
            {
                return _Card;
            }
            set
            {
                OnCardChanging(value);
                ReportPropertyChanging("Card");
                _Card = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Card");
                OnCardChanged();
            }
        }
        private global::System.String _Card;
        partial void OnCardChanging(global::System.String value);
        partial void OnCardChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Mother
        {
            get
            {
                return _Mother;
            }
            set
            {
                OnMotherChanging(value);
                ReportPropertyChanging("Mother");
                _Mother = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Mother");
                OnMotherChanged();
            }
        }
        private global::System.String _Mother;
        partial void OnMotherChanging(global::System.String value);
        partial void OnMotherChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDateOfObservation
        {
            get
            {
                return _StartDateOfObservation;
            }
            set
            {
                OnStartDateOfObservationChanging(value);
                ReportPropertyChanging("StartDateOfObservation");
                _StartDateOfObservation = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDateOfObservation");
                OnStartDateOfObservationChanged();
            }
        }
        private global::System.DateTime _StartDateOfObservation;
        partial void OnStartDateOfObservationChanging(global::System.DateTime value);
        partial void OnStartDateOfObservationChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Phone1
        {
            get
            {
                return _Phone1;
            }
            set
            {
                OnPhone1Changing(value);
                ReportPropertyChanging("Phone1");
                _Phone1 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Phone1");
                OnPhone1Changed();
            }
        }
        private Nullable<global::System.Int32> _Phone1;
        partial void OnPhone1Changing(Nullable<global::System.Int32> value);
        partial void OnPhone1Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> Phone2
        {
            get
            {
                return _Phone2;
            }
            set
            {
                OnPhone2Changing(value);
                ReportPropertyChanging("Phone2");
                _Phone2 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Phone2");
                OnPhone2Changed();
            }
        }
        private Nullable<global::System.Int32> _Phone2;
        partial void OnPhone2Changing(Nullable<global::System.Int32> value);
        partial void OnPhone2Changed();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> FunctionalClassesId
        {
            get
            {
                return _FunctionalClassesId;
            }
            set
            {
                OnFunctionalClassesIdChanging(value);
                ReportPropertyChanging("FunctionalClassesId");
                _FunctionalClassesId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FunctionalClassesId");
                OnFunctionalClassesIdChanged();
            }
        }
        private Nullable<global::System.Int32> _FunctionalClassesId;
        partial void OnFunctionalClassesIdChanging(Nullable<global::System.Int32> value);
        partial void OnFunctionalClassesIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "AppointmentsMTOPatients", "Appointments")]
        public EntityCollection<Appointments> Appointments
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Appointments>("Health.MsSqlDatabaseModel.AppointmentsMTOPatients", "Appointments");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Appointments>("Health.MsSqlDatabaseModel.AppointmentsMTOPatients", "Appointments", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsMTOFunctionalClasses", "FunctionalClasses")]
        public FunctionalClasses FunctionalClasses
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalClasses>("Health.MsSqlDatabaseModel.PatientsMTOFunctionalClasses", "FunctionalClasses").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalClasses>("Health.MsSqlDatabaseModel.PatientsMTOFunctionalClasses", "FunctionalClasses").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<FunctionalClasses> FunctionalClassesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<FunctionalClasses>("Health.MsSqlDatabaseModel.PatientsMTOFunctionalClasses", "FunctionalClasses");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<FunctionalClasses>("Health.MsSqlDatabaseModel.PatientsMTOFunctionalClasses", "FunctionalClasses", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsOTOUsers", "Users")]
        public Users Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Users").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Users").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Users> UsersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Users>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Users>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Users", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToSurgerysMTMPatients", "PatientsToSurgerys")]
        public EntityCollection<PatientsToSurgerys> PatientsToSurgerys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientsToSurgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMPatients", "PatientsToSurgerys");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientsToSurgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMPatients", "PatientsToSurgerys", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PersonalScheduleMTOPatients", "PersonalSchedule")]
        public EntityCollection<PersonalSchedule> PersonalSchedule
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PersonalSchedule>("Health.MsSqlDatabaseModel.PersonalScheduleMTOPatients", "PersonalSchedule");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PersonalSchedule>("Health.MsSqlDatabaseModel.PersonalScheduleMTOPatients", "PersonalSchedule", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "FunctionalDisordersToPatients", "FunctionalDisorders")]
        public EntityCollection<FunctionalDisorders> FunctionalDisorders
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersToPatients", "FunctionalDisorders");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<FunctionalDisorders>("Health.MsSqlDatabaseModel.FunctionalDisordersToPatients", "FunctionalDisorders", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToDiagnosis", "Diagnosis")]
        public EntityCollection<Diagnosis> Diagnosis
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Diagnosis>("Health.MsSqlDatabaseModel.PatientsToDiagnosis", "Diagnosis");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Diagnosis>("Health.MsSqlDatabaseModel.PatientsToDiagnosis", "Diagnosis", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToDoctors", "Doctors")]
        public EntityCollection<Doctors> Doctors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Doctors>("Health.MsSqlDatabaseModel.PatientsToDoctors", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Doctors>("Health.MsSqlDatabaseModel.PatientsToDoctors", "Doctors", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="PatientsToSurgerys")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PatientsToSurgerys : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PatientsToSurgerys.
        /// </summary>
        /// <param name="surgeryId">Исходное значение свойства SurgeryId.</param>
        /// <param name="patientId">Исходное значение свойства PatientId.</param>
        /// <param name="surgeryDate">Исходное значение свойства SurgeryDate.</param>
        public static PatientsToSurgerys CreatePatientsToSurgerys(global::System.Int32 surgeryId, global::System.Int32 patientId, global::System.DateTime surgeryDate)
        {
            PatientsToSurgerys patientsToSurgerys = new PatientsToSurgerys();
            patientsToSurgerys.SurgeryId = surgeryId;
            patientsToSurgerys.PatientId = patientId;
            patientsToSurgerys.SurgeryDate = surgeryDate;
            return patientsToSurgerys;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SurgeryId
        {
            get
            {
                return _SurgeryId;
            }
            set
            {
                if (_SurgeryId != value)
                {
                    OnSurgeryIdChanging(value);
                    ReportPropertyChanging("SurgeryId");
                    _SurgeryId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SurgeryId");
                    OnSurgeryIdChanged();
                }
            }
        }
        private global::System.Int32 _SurgeryId;
        partial void OnSurgeryIdChanging(global::System.Int32 value);
        partial void OnSurgeryIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                if (_PatientId != value)
                {
                    OnPatientIdChanging(value);
                    ReportPropertyChanging("PatientId");
                    _PatientId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PatientId");
                    OnPatientIdChanged();
                }
            }
        }
        private global::System.Int32 _PatientId;
        partial void OnPatientIdChanging(global::System.Int32 value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime SurgeryDate
        {
            get
            {
                return _SurgeryDate;
            }
            set
            {
                if (_SurgeryDate != value)
                {
                    OnSurgeryDateChanging(value);
                    ReportPropertyChanging("SurgeryDate");
                    _SurgeryDate = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SurgeryDate");
                    OnSurgeryDateChanged();
                }
            }
        }
        private global::System.DateTime _SurgeryDate;
        partial void OnSurgeryDateChanging(global::System.DateTime value);
        partial void OnSurgeryDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Boolean> SurgeryStatus
        {
            get
            {
                return _SurgeryStatus;
            }
            set
            {
                OnSurgeryStatusChanging(value);
                ReportPropertyChanging("SurgeryStatus");
                _SurgeryStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SurgeryStatus");
                OnSurgeryStatusChanged();
            }
        }
        private Nullable<global::System.Boolean> _SurgeryStatus;
        partial void OnSurgeryStatusChanging(Nullable<global::System.Boolean> value);
        partial void OnSurgeryStatusChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToSurgerysMTMPatients", "Patients")]
        public Patients Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMPatients", "Patients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMPatients", "Patients").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patients> PatientsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMPatients", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMPatients", "Patients", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToSurgerysMTMSurgerys", "Surgerys")]
        public Surgerys Surgerys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Surgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMSurgerys", "Surgerys").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Surgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMSurgerys", "Surgerys").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Surgerys> SurgerysReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Surgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMSurgerys", "Surgerys");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Surgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMSurgerys", "Surgerys", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="PersonalSchedule")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class PersonalSchedule : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта PersonalSchedule.
        /// </summary>
        /// <param name="personalScheduleId">Исходное значение свойства PersonalScheduleId.</param>
        public static PersonalSchedule CreatePersonalSchedule(global::System.Int32 personalScheduleId)
        {
            PersonalSchedule personalSchedule = new PersonalSchedule();
            personalSchedule.PersonalScheduleId = personalScheduleId;
            return personalSchedule;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PersonalScheduleId
        {
            get
            {
                return _PersonalScheduleId;
            }
            set
            {
                if (_PersonalScheduleId != value)
                {
                    OnPersonalScheduleIdChanging(value);
                    ReportPropertyChanging("PersonalScheduleId");
                    _PersonalScheduleId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PersonalScheduleId");
                    OnPersonalScheduleIdChanged();
                }
            }
        }
        private global::System.Int32 _PersonalScheduleId;
        partial void OnPersonalScheduleIdChanging(global::System.Int32 value);
        partial void OnPersonalScheduleIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> PatientId
        {
            get
            {
                return _PatientId;
            }
            set
            {
                OnPatientIdChanging(value);
                ReportPropertyChanging("PatientId");
                _PatientId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PatientId");
                OnPatientIdChanged();
            }
        }
        private Nullable<global::System.Int32> _PatientId;
        partial void OnPatientIdChanging(Nullable<global::System.Int32> value);
        partial void OnPatientIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParameterId
        {
            get
            {
                return _ParameterId;
            }
            set
            {
                OnParameterIdChanging(value);
                ReportPropertyChanging("ParameterId");
                _ParameterId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParameterId");
                OnParameterIdChanged();
            }
        }
        private Nullable<global::System.Int32> _ParameterId;
        partial void OnParameterIdChanging(Nullable<global::System.Int32> value);
        partial void OnParameterIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateStart
        {
            get
            {
                return _DateStart;
            }
            set
            {
                OnDateStartChanging(value);
                ReportPropertyChanging("DateStart");
                _DateStart = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateStart");
                OnDateStartChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateStart;
        partial void OnDateStartChanging(Nullable<global::System.DateTime> value);
        partial void OnDateStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateEnd
        {
            get
            {
                return _DateEnd;
            }
            set
            {
                OnDateEndChanging(value);
                ReportPropertyChanging("DateEnd");
                _DateEnd = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateEnd");
                OnDateEndChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateEnd;
        partial void OnDateEndChanging(Nullable<global::System.DateTime> value);
        partial void OnDateEndChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.TimeSpan> TimeStart
        {
            get
            {
                return _TimeStart;
            }
            set
            {
                OnTimeStartChanging(value);
                ReportPropertyChanging("TimeStart");
                _TimeStart = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeStart");
                OnTimeStartChanged();
            }
        }
        private Nullable<global::System.TimeSpan> _TimeStart;
        partial void OnTimeStartChanging(Nullable<global::System.TimeSpan> value);
        partial void OnTimeStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.TimeSpan> TimeEnd
        {
            get
            {
                return _TimeEnd;
            }
            set
            {
                OnTimeEndChanging(value);
                ReportPropertyChanging("TimeEnd");
                _TimeEnd = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TimeEnd");
                OnTimeEndChanged();
            }
        }
        private Nullable<global::System.TimeSpan> _TimeEnd;
        partial void OnTimeEndChanging(Nullable<global::System.TimeSpan> value);
        partial void OnTimeEndChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DayOfWeek
        {
            get
            {
                return _DayOfWeek;
            }
            set
            {
                OnDayOfWeekChanging(value);
                ReportPropertyChanging("DayOfWeek");
                _DayOfWeek = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DayOfWeek");
                OnDayOfWeekChanged();
            }
        }
        private Nullable<global::System.Int32> _DayOfWeek;
        partial void OnDayOfWeekChanging(Nullable<global::System.Int32> value);
        partial void OnDayOfWeekChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> DayOfMonth
        {
            get
            {
                return _DayOfMonth;
            }
            set
            {
                OnDayOfMonthChanging(value);
                ReportPropertyChanging("DayOfMonth");
                _DayOfMonth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DayOfMonth");
                OnDayOfMonthChanged();
            }
        }
        private Nullable<global::System.Int32> _DayOfMonth;
        partial void OnDayOfMonthChanging(Nullable<global::System.Int32> value);
        partial void OnDayOfMonthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> MonthOfYear
        {
            get
            {
                return _MonthOfYear;
            }
            set
            {
                OnMonthOfYearChanging(value);
                ReportPropertyChanging("MonthOfYear");
                _MonthOfYear = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MonthOfYear");
                OnMonthOfYearChanged();
            }
        }
        private Nullable<global::System.Int32> _MonthOfYear;
        partial void OnMonthOfYearChanging(Nullable<global::System.Int32> value);
        partial void OnMonthOfYearChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WeekOfMonth
        {
            get
            {
                return _WeekOfMonth;
            }
            set
            {
                OnWeekOfMonthChanging(value);
                ReportPropertyChanging("WeekOfMonth");
                _WeekOfMonth = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeekOfMonth");
                OnWeekOfMonthChanged();
            }
        }
        private Nullable<global::System.Int32> _WeekOfMonth;
        partial void OnWeekOfMonthChanging(Nullable<global::System.Int32> value);
        partial void OnWeekOfMonthChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> WeekParity
        {
            get
            {
                return _WeekParity;
            }
            set
            {
                OnWeekParityChanging(value);
                ReportPropertyChanging("WeekParity");
                _WeekParity = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WeekParity");
                OnWeekParityChanged();
            }
        }
        private Nullable<global::System.Int32> _WeekParity;
        partial void OnWeekParityChanging(Nullable<global::System.Int32> value);
        partial void OnWeekParityChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PersonalScheduleMTOParameters", "Parameters")]
        public Parameters Parameters
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameters>("Health.MsSqlDatabaseModel.PersonalScheduleMTOParameters", "Parameters").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameters>("Health.MsSqlDatabaseModel.PersonalScheduleMTOParameters", "Parameters").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Parameters> ParametersReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Parameters>("Health.MsSqlDatabaseModel.PersonalScheduleMTOParameters", "Parameters");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Parameters>("Health.MsSqlDatabaseModel.PersonalScheduleMTOParameters", "Parameters", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PersonalScheduleMTOPatients", "Patients")]
        public Patients Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PersonalScheduleMTOPatients", "Patients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PersonalScheduleMTOPatients", "Patients").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patients> PatientsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PersonalScheduleMTOPatients", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patients>("Health.MsSqlDatabaseModel.PersonalScheduleMTOPatients", "Patients", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Roles")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Roles : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Roles.
        /// </summary>
        /// <param name="roleId">Исходное значение свойства RoleId.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Roles CreateRoles(global::System.Int32 roleId, global::System.String name)
        {
            Roles roles = new Roles();
            roles.RoleId = roleId;
            roles.Name = name;
            return roles;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                if (_RoleId != value)
                {
                    OnRoleIdChanging(value);
                    ReportPropertyChanging("RoleId");
                    _RoleId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("RoleId");
                    OnRoleIdChanged();
                }
            }
        }
        private global::System.Int32 _RoleId;
        partial void OnRoleIdChanging(global::System.Int32 value);
        partial void OnRoleIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "CandidatesMTORoles", "Candidates")]
        public EntityCollection<Candidates> Candidates
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Candidates>("Health.MsSqlDatabaseModel.CandidatesMTORoles", "Candidates");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Candidates>("Health.MsSqlDatabaseModel.CandidatesMTORoles", "Candidates", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "UsersMTORoles", "Users")]
        public EntityCollection<Users> Users
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Users>("Health.MsSqlDatabaseModel.UsersMTORoles", "Users");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Users>("Health.MsSqlDatabaseModel.UsersMTORoles", "Users", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Specialties")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Specialties : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Specialties.
        /// </summary>
        /// <param name="specialtyId">Исходное значение свойства SpecialtyId.</param>
        public static Specialties CreateSpecialties(global::System.Int32 specialtyId)
        {
            Specialties specialties = new Specialties();
            specialties.SpecialtyId = specialtyId;
            return specialties;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SpecialtyId
        {
            get
            {
                return _SpecialtyId;
            }
            set
            {
                if (_SpecialtyId != value)
                {
                    OnSpecialtyIdChanging(value);
                    ReportPropertyChanging("SpecialtyId");
                    _SpecialtyId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SpecialtyId");
                    OnSpecialtyIdChanged();
                }
            }
        }
        private global::System.Int32 _SpecialtyId;
        partial void OnSpecialtyIdChanging(global::System.Int32 value);
        partial void OnSpecialtyIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DoctorsMTOSpecialties", "Doctors")]
        public EntityCollection<Doctors> Doctors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Doctors>("Health.MsSqlDatabaseModel.DoctorsMTOSpecialties", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Doctors>("Health.MsSqlDatabaseModel.DoctorsMTOSpecialties", "Doctors", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Surgerys")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Surgerys : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Surgerys.
        /// </summary>
        /// <param name="surgeryId">Исходное значение свойства SurgeryId.</param>
        public static Surgerys CreateSurgerys(global::System.Int32 surgeryId)
        {
            Surgerys surgerys = new Surgerys();
            surgerys.SurgeryId = surgeryId;
            return surgerys;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SurgeryId
        {
            get
            {
                return _SurgeryId;
            }
            set
            {
                if (_SurgeryId != value)
                {
                    OnSurgeryIdChanging(value);
                    ReportPropertyChanging("SurgeryId");
                    _SurgeryId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SurgeryId");
                    OnSurgeryIdChanged();
                }
            }
        }
        private global::System.Int32 _SurgeryId;
        partial void OnSurgeryIdChanging(global::System.Int32 value);
        partial void OnSurgeryIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SurgeryDescription
        {
            get
            {
                return _SurgeryDescription;
            }
            set
            {
                OnSurgeryDescriptionChanging(value);
                ReportPropertyChanging("SurgeryDescription");
                _SurgeryDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SurgeryDescription");
                OnSurgeryDescriptionChanged();
            }
        }
        private global::System.String _SurgeryDescription;
        partial void OnSurgeryDescriptionChanging(global::System.String value);
        partial void OnSurgeryDescriptionChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsToSurgerysMTMSurgerys", "PatientsToSurgerys")]
        public EntityCollection<PatientsToSurgerys> PatientsToSurgerys
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<PatientsToSurgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMSurgerys", "PatientsToSurgerys");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<PatientsToSurgerys>("Health.MsSqlDatabaseModel.PatientsToSurgerysMTMSurgerys", "PatientsToSurgerys", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="Users")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Users : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Users.
        /// </summary>
        /// <param name="userId">Исходное значение свойства UserId.</param>
        /// <param name="firstName">Исходное значение свойства FirstName.</param>
        /// <param name="lastName">Исходное значение свойства LastName.</param>
        /// <param name="thirdName">Исходное значение свойства ThirdName.</param>
        /// <param name="login">Исходное значение свойства Login.</param>
        /// <param name="password">Исходное значение свойства Password.</param>
        /// <param name="roleId">Исходное значение свойства RoleId.</param>
        /// <param name="birthday">Исходное значение свойства Birthday.</param>
        /// <param name="token">Исходное значение свойства Token.</param>
        public static Users CreateUsers(global::System.Int32 userId, global::System.String firstName, global::System.String lastName, global::System.String thirdName, global::System.String login, global::System.String password, global::System.Int32 roleId, global::System.DateTime birthday, global::System.String token)
        {
            Users users = new Users();
            users.UserId = userId;
            users.FirstName = firstName;
            users.LastName = lastName;
            users.ThirdName = thirdName;
            users.Login = login;
            users.Password = password;
            users.RoleId = roleId;
            users.Birthday = birthday;
            users.Token = token;
            return users;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 UserId
        {
            get
            {
                return _UserId;
            }
            set
            {
                if (_UserId != value)
                {
                    OnUserIdChanging(value);
                    ReportPropertyChanging("UserId");
                    _UserId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("UserId");
                    OnUserIdChanged();
                }
            }
        }
        private global::System.Int32 _UserId;
        partial void OnUserIdChanging(global::System.Int32 value);
        partial void OnUserIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String FirstName
        {
            get
            {
                return _FirstName;
            }
            set
            {
                OnFirstNameChanging(value);
                ReportPropertyChanging("FirstName");
                _FirstName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("FirstName");
                OnFirstNameChanged();
            }
        }
        private global::System.String _FirstName;
        partial void OnFirstNameChanging(global::System.String value);
        partial void OnFirstNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LastName
        {
            get
            {
                return _LastName;
            }
            set
            {
                OnLastNameChanging(value);
                ReportPropertyChanging("LastName");
                _LastName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LastName");
                OnLastNameChanged();
            }
        }
        private global::System.String _LastName;
        partial void OnLastNameChanging(global::System.String value);
        partial void OnLastNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ThirdName
        {
            get
            {
                return _ThirdName;
            }
            set
            {
                OnThirdNameChanging(value);
                ReportPropertyChanging("ThirdName");
                _ThirdName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ThirdName");
                OnThirdNameChanged();
            }
        }
        private global::System.String _ThirdName;
        partial void OnThirdNameChanging(global::System.String value);
        partial void OnThirdNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Login
        {
            get
            {
                return _Login;
            }
            set
            {
                OnLoginChanging(value);
                ReportPropertyChanging("Login");
                _Login = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Login");
                OnLoginChanged();
            }
        }
        private global::System.String _Login;
        partial void OnLoginChanging(global::System.String value);
        partial void OnLoginChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Password
        {
            get
            {
                return _Password;
            }
            set
            {
                OnPasswordChanging(value);
                ReportPropertyChanging("Password");
                _Password = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Password");
                OnPasswordChanged();
            }
        }
        private global::System.String _Password;
        partial void OnPasswordChanging(global::System.String value);
        partial void OnPasswordChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 RoleId
        {
            get
            {
                return _RoleId;
            }
            set
            {
                OnRoleIdChanging(value);
                ReportPropertyChanging("RoleId");
                _RoleId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("RoleId");
                OnRoleIdChanged();
            }
        }
        private global::System.Int32 _RoleId;
        partial void OnRoleIdChanging(global::System.Int32 value);
        partial void OnRoleIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime Birthday
        {
            get
            {
                return _Birthday;
            }
            set
            {
                OnBirthdayChanging(value);
                ReportPropertyChanging("Birthday");
                _Birthday = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Birthday");
                OnBirthdayChanged();
            }
        }
        private global::System.DateTime _Birthday;
        partial void OnBirthdayChanging(global::System.DateTime value);
        partial void OnBirthdayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Token
        {
            get
            {
                return _Token;
            }
            set
            {
                OnTokenChanging(value);
                ReportPropertyChanging("Token");
                _Token = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Token");
                OnTokenChanged();
            }
        }
        private global::System.String _Token;
        partial void OnTokenChanging(global::System.String value);
        partial void OnTokenChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "DoctorsOTOUsers", "Doctors")]
        public Doctors Doctors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Doctors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Doctors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctors> DoctorsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctors>("Health.MsSqlDatabaseModel.DoctorsOTOUsers", "Doctors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "PatientsOTOUsers", "Patients")]
        public Patients Patients
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Patients").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Patients").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Patients> PatientsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Patients");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Patients>("Health.MsSqlDatabaseModel.PatientsOTOUsers", "Patients", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "UsersMTORoles", "Roles")]
        public Roles Roles
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("Health.MsSqlDatabaseModel.UsersMTORoles", "Roles").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("Health.MsSqlDatabaseModel.UsersMTORoles", "Roles").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Roles> RolesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Roles>("Health.MsSqlDatabaseModel.UsersMTORoles", "Roles");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Roles>("Health.MsSqlDatabaseModel.UsersMTORoles", "Roles", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Health.MsSqlDatabaseModel", Name="WorkWeeks")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WorkWeeks : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта WorkWeeks.
        /// </summary>
        /// <param name="doctorId">Исходное значение свойства DoctorId.</param>
        /// <param name="isWeekEndDay">Исходное значение свойства IsWeekEndDay.</param>
        /// <param name="dayInWeek">Исходное значение свойства DayInWeek.</param>
        /// <param name="timeStart">Исходное значение свойства TimeStart.</param>
        /// <param name="timeEnd">Исходное значение свойства TimeEnd.</param>
        /// <param name="dinnerStart">Исходное значение свойства DinnerStart.</param>
        /// <param name="dinnerEnd">Исходное значение свойства DinnerEnd.</param>
        /// <param name="attendingHoursStart">Исходное значение свойства AttendingHoursStart.</param>
        /// <param name="attendingHoursEnd">Исходное значение свойства AttendingHoursEnd.</param>
        /// <param name="attendingMinutes">Исходное значение свойства AttendingMinutes.</param>
        public static WorkWeeks CreateWorkWeeks(global::System.Int32 doctorId, global::System.Boolean isWeekEndDay, global::System.Int32 dayInWeek, global::System.TimeSpan timeStart, global::System.TimeSpan timeEnd, global::System.TimeSpan dinnerStart, global::System.TimeSpan dinnerEnd, global::System.TimeSpan attendingHoursStart, global::System.TimeSpan attendingHoursEnd, global::System.Int32 attendingMinutes)
        {
            WorkWeeks workWeeks = new WorkWeeks();
            workWeeks.DoctorId = doctorId;
            workWeeks.IsWeekEndDay = isWeekEndDay;
            workWeeks.DayInWeek = dayInWeek;
            workWeeks.TimeStart = timeStart;
            workWeeks.TimeEnd = timeEnd;
            workWeeks.DinnerStart = dinnerStart;
            workWeeks.DinnerEnd = dinnerEnd;
            workWeeks.AttendingHoursStart = attendingHoursStart;
            workWeeks.AttendingHoursEnd = attendingHoursEnd;
            workWeeks.AttendingMinutes = attendingMinutes;
            return workWeeks;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DoctorId
        {
            get
            {
                return _DoctorId;
            }
            set
            {
                if (_DoctorId != value)
                {
                    OnDoctorIdChanging(value);
                    ReportPropertyChanging("DoctorId");
                    _DoctorId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DoctorId");
                    OnDoctorIdChanged();
                }
            }
        }
        private global::System.Int32 _DoctorId;
        partial void OnDoctorIdChanging(global::System.Int32 value);
        partial void OnDoctorIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsWeekEndDay
        {
            get
            {
                return _IsWeekEndDay;
            }
            set
            {
                if (_IsWeekEndDay != value)
                {
                    OnIsWeekEndDayChanging(value);
                    ReportPropertyChanging("IsWeekEndDay");
                    _IsWeekEndDay = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsWeekEndDay");
                    OnIsWeekEndDayChanged();
                }
            }
        }
        private global::System.Boolean _IsWeekEndDay;
        partial void OnIsWeekEndDayChanging(global::System.Boolean value);
        partial void OnIsWeekEndDayChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 DayInWeek
        {
            get
            {
                return _DayInWeek;
            }
            set
            {
                if (_DayInWeek != value)
                {
                    OnDayInWeekChanging(value);
                    ReportPropertyChanging("DayInWeek");
                    _DayInWeek = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DayInWeek");
                    OnDayInWeekChanged();
                }
            }
        }
        private global::System.Int32 _DayInWeek;
        partial void OnDayInWeekChanging(global::System.Int32 value);
        partial void OnDayInWeekChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan TimeStart
        {
            get
            {
                return _TimeStart;
            }
            set
            {
                if (_TimeStart != value)
                {
                    OnTimeStartChanging(value);
                    ReportPropertyChanging("TimeStart");
                    _TimeStart = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TimeStart");
                    OnTimeStartChanged();
                }
            }
        }
        private global::System.TimeSpan _TimeStart;
        partial void OnTimeStartChanging(global::System.TimeSpan value);
        partial void OnTimeStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan TimeEnd
        {
            get
            {
                return _TimeEnd;
            }
            set
            {
                if (_TimeEnd != value)
                {
                    OnTimeEndChanging(value);
                    ReportPropertyChanging("TimeEnd");
                    _TimeEnd = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TimeEnd");
                    OnTimeEndChanged();
                }
            }
        }
        private global::System.TimeSpan _TimeEnd;
        partial void OnTimeEndChanging(global::System.TimeSpan value);
        partial void OnTimeEndChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan DinnerStart
        {
            get
            {
                return _DinnerStart;
            }
            set
            {
                if (_DinnerStart != value)
                {
                    OnDinnerStartChanging(value);
                    ReportPropertyChanging("DinnerStart");
                    _DinnerStart = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DinnerStart");
                    OnDinnerStartChanged();
                }
            }
        }
        private global::System.TimeSpan _DinnerStart;
        partial void OnDinnerStartChanging(global::System.TimeSpan value);
        partial void OnDinnerStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan DinnerEnd
        {
            get
            {
                return _DinnerEnd;
            }
            set
            {
                if (_DinnerEnd != value)
                {
                    OnDinnerEndChanging(value);
                    ReportPropertyChanging("DinnerEnd");
                    _DinnerEnd = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("DinnerEnd");
                    OnDinnerEndChanged();
                }
            }
        }
        private global::System.TimeSpan _DinnerEnd;
        partial void OnDinnerEndChanging(global::System.TimeSpan value);
        partial void OnDinnerEndChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan AttendingHoursStart
        {
            get
            {
                return _AttendingHoursStart;
            }
            set
            {
                if (_AttendingHoursStart != value)
                {
                    OnAttendingHoursStartChanging(value);
                    ReportPropertyChanging("AttendingHoursStart");
                    _AttendingHoursStart = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttendingHoursStart");
                    OnAttendingHoursStartChanged();
                }
            }
        }
        private global::System.TimeSpan _AttendingHoursStart;
        partial void OnAttendingHoursStartChanging(global::System.TimeSpan value);
        partial void OnAttendingHoursStartChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.TimeSpan AttendingHoursEnd
        {
            get
            {
                return _AttendingHoursEnd;
            }
            set
            {
                if (_AttendingHoursEnd != value)
                {
                    OnAttendingHoursEndChanging(value);
                    ReportPropertyChanging("AttendingHoursEnd");
                    _AttendingHoursEnd = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttendingHoursEnd");
                    OnAttendingHoursEndChanged();
                }
            }
        }
        private global::System.TimeSpan _AttendingHoursEnd;
        partial void OnAttendingHoursEndChanging(global::System.TimeSpan value);
        partial void OnAttendingHoursEndChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AttendingMinutes
        {
            get
            {
                return _AttendingMinutes;
            }
            set
            {
                if (_AttendingMinutes != value)
                {
                    OnAttendingMinutesChanging(value);
                    ReportPropertyChanging("AttendingMinutes");
                    _AttendingMinutes = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("AttendingMinutes");
                    OnAttendingMinutesChanged();
                }
            }
        }
        private global::System.Int32 _AttendingMinutes;
        partial void OnAttendingMinutesChanging(global::System.Int32 value);
        partial void OnAttendingMinutesChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Health.MsSqlDatabaseModel", "WorkWeeksMTODoctors", "Doctors")]
        public Doctors Doctors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.WorkWeeksMTODoctors", "Doctors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.WorkWeeksMTODoctors", "Doctors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Doctors> DoctorsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Doctors>("Health.MsSqlDatabaseModel.WorkWeeksMTODoctors", "Doctors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Doctors>("Health.MsSqlDatabaseModel.WorkWeeksMTODoctors", "Doctors", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
